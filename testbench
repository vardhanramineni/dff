
/////// Transaction class 
class transaction;
rand bit din;
bit dout;

function transaction copy();
copy=new();
copy.din=this.din;
copy.dout=this.dout;
endfunction


function void display(input string tag);
$display("[%0s] DIN:%0d \t DOUT:%0d",tag,din,dout);
endfunction

endclass

/// Generator class 

class generator;
transaction tr;
mailbox #(transaction) mbx;
mailbox #(transaction) mbxref;
event sconext;
event done;
int count1;
int count;

function new(mailbox #(transaction) mbx,mailbox #(transaction) mbxref);
this.mbx=mbx;
this.mbxref=mbxref;
tr=new();
endfunction

task run();
repeat(count) begin 
for(int i=0;i<10;i++) begin
assert(tr.randomize()) else $display("[GEN] randomization failed");
mbx.put(tr.copy());
mbxref.put(tr.copy());
tr.display("GEN");
@(sconext);
count1++;
$display("count :%0d",count1);
end
end

->done;

endtask


endclass

///// Driver class

class driver;
transaction tr;
mailbox #(transaction) mbx;
virtual dff_if vif;

function new(mailbox #(transaction) mbx);
this.mbx=mbx;
endfunction

task reset();
vif.rst<=1'b1;
repeat(5)@(posedge vif.clk);
vif.rst<=1'b0;
@(posedge vif.clk);
$display("[DRV] reset done");
endtask

task run();
forever begin
mbx.get(tr);
vif.din<=tr.din;
@(posedge vif.clk);
tr.display("DRV");

@(posedge vif.clk);
end
endtask

endclass

///// Coverage class
class dff_coverage;
  transaction trans;
  covergroup cg @(posedge vif.clk);
    coverpoint trans.din {
      bins din_vals[] = {[0:1]};
    }

    coverpoint trans.dout {
      bins dout_vals[] = {[0:1]};
    }

   
  endgroup

  virtual dff_if vif;

  function new(virtual dff_if vif);
    this.vif = vif;
    trans = new();
    cg = new();
  endfunction

  function void sample(transaction t);
    trans.din = t.din;
    trans.dout = t.dout;
    cg.sample();
  endfunction

endclass

/// monitor class 


class monitor;
transaction tr;
mailbox #(transaction) mbx;
virtual dff_if vif;
dff_coverage cov;

function new(mailbox #(transaction) mbx);
this.mbx=mbx;
endfunction

function void set_interface(virtual dff_if vif);
this.vif=vif;
cov=new(vif);
endfunction


task run();
tr=new();
forever begin

repeat(2) @(posedge vif.clk);
tr.dout=vif.dout;
tr.din=vif.din;
mbx.put(tr);
tr.display("MON");
cov.sample(tr);
end

endtask

endclass

///// scoreboard class

class scoreboard;
transaction tr;
transaction tref;
mailbox #(transaction) mbx;
mailbox #(transaction) mbxref;
event sconext;

function new(mailbox #(transaction) mbx,mailbox #(transaction) mbxref);
this.mbx=mbx;
this.mbxref=mbxref;
endfunction


task run();
forever begin
mbx.get(tr);
mbxref.get(tref);
tr.display("SCO");
if(tr.dout==tref.din) 
$display("[SCO] data matched");
else 
$display("[SCO] data mismatched");
$display("------------------------------------");
->sconext;

end

endtask

endclass

////// environment class

class environment;
generator gen;
driver drv;
monitor mon;
scoreboard sco;
event next;


mailbox #(transaction) gdmbx;
mailbox #(transaction) msmbx;
mailbox #(transaction) mbxref;

virtual dff_if vif;

function new(virtual dff_if vif);
gdmbx=new();
mbxref=new();
gen=new(gdmbx,mbxref);
drv=new(gdmbx);

msmbx=new();
mon=new(msmbx);
mon.set_interface(vif);

sco=new(msmbx,mbxref);

this.vif=vif;
drv.vif=this.vif;
mon.vif=this.vif;

gen.sconext=next;
sco.sconext=next;
endfunction

task pre_test();
drv.reset();
endtask

task test();
fork 
gen.run();
drv.run();
mon.run();
sco.run();
join_none

endtask

task post_test();
repeat(30) @(posedge vif.clk);
$display("Functional Coverage = %0.2f%%", mon.cov.cg.get_coverage());
$display("finish");
$finish();
endtask 

task run();
pre_test();
test();
post_test();
endtask

endclass


module tb;
dff_if vif();
dff dut(vif);

initial begin
vif.clk<=0;
end

always #10 vif.clk=~vif.clk;

environment env;

initial begin 
env=new(vif);
env.gen.count=85;
env.run();
end
